#!/usr/bin/env python
import cairo
import yaml

import argparse as ap
from datetime import datetime
from datetime import timedelta
from fnmatch import fnmatch
from glob import glob
from importlib import import_module
import logging
from os import makedirs
from os.path import basename, dirname, join, realpath
from time import sleep

import gpsrenda
gpsrenda.logger.setLevel(logging.DEBUG)

from gpsrenda.datasources import FitDataSource
from gpsrenda.globals import globals, set_globals
from gpsrenda.utils import merge_dict
import gpsrenda.video

def find_video_config(config, path, default = {}):
    globs = config.get('video', [])
    matched = False
    conf = merge_dict({}, default)
    for possglob in globs:
        if not fnmatch(realpath(path), realpath(possglob['glob'])):
            continue
        matched = True
        merge_dict(conf, possglob)
    if not matched:
        gpsrenda.logger.warning(f"path {path} was not matched by any video glob objects in configuration file")
    return conf

def renda(video_paths, data_path, default_time_offset, config_path, preview = None):
    logging.basicConfig(format='%(asctime)s %(levelname)s [%(name)s] %(message)s', datefmt="%Y-%m-%d %H:%M:%S")

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    logger.debug("Begin")

    with open(config_path, 'r') as config_file:
        config_data = yaml.safe_load(config_file)

    set_globals(config_data.get('globals', {}))

    data_source = FitDataSource(data_path, config=config_data.get('data', {}))

    widgets = []
    widget_module = import_module('gpsrenda.widgets.widgets')
    for widget_spec in config_data['widgets']:
        try:
            widget_type = widget_spec.pop('type')
            widget_class = getattr(widget_module, widget_type+'Widget')
            widget = widget_class(data_source=data_source, **widget_spec)
            widgets.append(widget)
        except Exception as e:
            print(f"while trying to create a widget of type {widget_type}:")
            raise

    interactive_offset = 0.0
    time_offset = default_time_offset
    def adjust_time_offset(adj):
        nonlocal interactive_offset
        interactive_offset += adj
        print(f"\ntime offset now set to {time_offset + interactive_offset}")

    def make_frame(ctx, t):
        for widget in widgets:
            widget.render(ctx, t - time_offset - interactive_offset)
    engine = gpsrenda.video.default_engine(make_frame, adjust_time_offset = adjust_time_offset)

    for video_path in video_paths:
        cfg = find_video_config(config_data, video_path, default = {'offset': default_time_offset})
        time_offset = cfg['offset']
        if preview is not None:
            engine.preview(video_path, seek = preview)
        else:
            out_dir = join(dirname(video_path), 'rendered')
            try:
                makedirs(out_dir)
            except FileExistsError:
                pass

            output_file = join(out_dir, basename(video_path))

            engine.render(video_path, output_file)

if __name__ == "__main__":
    parser = ap.ArgumentParser()
    parser.add_argument('video_pattern', type=str, nargs='+', help="Path or glob pointing to video file(s)")
    parser.add_argument('data_path', type=str, help="Path to the activity data file")
    parser.add_argument('config_path', type=str, help="Path to the gauges setup and config file")
    parser.add_argument('-t', '--time-offset', dest='time_offset', type=float, default=0.,
                        help="How far ahead (+) or behind (-) is the video compared to the fit file's internal timestamps")
    parser.add_argument('-p', '--preview', dest='preview', action='store_true', default=False)
    parser.add_argument('--preview-seek', dest='preview_seek', type=float, default=0., help="Time offset to start previewing from")

    args = parser.parse_args()
    video_paths = sum([glob(pattern) for pattern in args.video_pattern], [])
    time_offset = args.time_offset #timedelta(seconds=args.time_offset)

    renda(video_paths, args.data_path, time_offset, args.config_path, preview = args.preview_seek if args.preview else None)
