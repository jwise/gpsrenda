import argparse as ap
from glob import glob
from importlib import import_module

import yaml

from gpsrenda.fit import FitByTime
from gpsrenda.video import RenderLoop
from gpsrenda.video.source import VideoSourceGoPro


def renda(video_paths, data_path, time_offset, config_path):
    fit_data = FitByTime(data_path)
    cadence = fit.interpolator('cadence')
    heart_rate = fit.interpolator('heart_rate')
    power = fit.interpolator('power')
    speed_kph = fit.interpolator('speed')
    dist_km = fit.interpolator('distance')
    temp_c = fit.interpolator('temperature')
    latitude = fit.interpolator('position_lat')
    longitude = fit.interpolator('position_long')
    altitude = fit.interpolator('altitude')
    grade = fit.interpolator('grade')

    with open(config_path, 'r') as config_file:
        config_data = yaml.load(config_file)

    gauges = {}
    gauge_module = import_module('gpsrenda.widgets')
    for gauge_spec in config_data['gauges']:
        gauge_class = getattr(gauge_module, gauge_spec.pop('type'))
        gauge_data = gauge_spec.pop('data')
        gauge = gauge_class(**gauge_spec)
        guages[gauge_data] = gauge

    def paint(ctx, w, h, tm):
        for gauge_data, gauge in gauges.items():
            # TODO: render the gauge

    # TODO: here
    for video_path in video_paths:
        source = VideoSourceGoPro(video_path, time_offset=-time_offset)
        # TODO: remove need to supply date

        # TODO: generate output path
        RenderLoop(source, painter=paint).encode(output)


if __name__ == "__main__":
    parser = ap.ArgumentParser()
    parser.add_argument('video_pattern', type='str', help="Path or glob pointing to video file(s)")
    parser.add_argument('data_path', type='str', help="Path to the activity data file")
    parser.add_argument('time_offset', type='float', help="How far ahead (+) or behind (-) are the fit file's internal timestamps compared to the video's")
    parser.add_argument('config_path', type='str', help="Path to the gauges setup and config file")

    args = parser.parse_args()
    video_paths = glob(args)

    renda(video_paths, args.data_path, args.time_offset, args.config_path)
